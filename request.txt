POST /chat/completions HTTP/1.1
host: api.business.githubcopilot.com
connection: keep-alive
Authorization: Bearer tid=e2744718996946b83e7c1d283fe354bf;ol=959b02e6b808bd89d22fff34a31b9f15;exp=1738669282;sku=copilot_for_business_seat;proxy-ep=proxy.business.githubcopilot.com;st=dotcom;ssc=1;chat=1;cit=1;malfil=1;nes=0;editor_preview_features=0;8kp=1;ip=81.10.246.103;asn=AS12605:9208de3c767f6d79f76acb35890c3ccb4db33863c5ba4ba52bfb7cb587a59083
X-Request-Id: db2ffaa9-38bf-4509-9d2f-608255622b1b
X-GitHub-Api-Version: 2024-12-15
Openai-Organization: github-copilot
Copilot-Integration-Id: vscode-chat
VScode-SessionId: db6b7b41-e06d-4e14-ab22-b21623df4d641738661451058
VScode-MachineId: 3b9504ccff167535f6ee2546ca5184785d0f86c345ec01b3d2f1c38527818716
Editor-Version: vscode/1.96.4
Editor-Plugin-Version: copilot-chat/0.23.2
OpenAI-Intent: conversation-edits
User-Agent: GitHubCopilotChat/0.23.2
Content-Type: application/json
accept: */*
accept-language: *
sec-fetch-mode: cors
accept-encoding: br, gzip, deflate
content-length: 4788

{"messages":[{"role":"system","content":"You are an AI programming assistant.\nWhen asked for your name, you must respond with \"GitHub Copilot\".\nFollow the user's requirements carefully & to the letter.\nFollow Microsoft content policies.\nAvoid content that violates copyrights.\nIf you are asked to generate content that is harmful, hateful, racist, sexist, lewd, violent, or completely irrelevant to software engineering, only respond with \"Sorry, I can't assist with that.\"\nKeep your answers short and impersonal."},{"role":"user","content":"The user has a request for modifying one or more files.\n1. Please come up with a solution that you first describe step-by-step.\n2. Group your changes by file. Use the file path as the header.\n3. For each file, give a short summary of what needs to be changed followed by a code block that contains the code changes.\n4. Each file's code block must start with a comment containing the filepath.\n5. Use a single code block per file that needs to be modified, even if there are multiple changes for a file.\n6. The user is very smart and can understand how to merge your code blocks into their files, you just need to provide minimal hints.\n7. Avoid repeating existing code, instead use comments to represent regions of unchanged code. The user prefers that you are as concise as possible. For example: \n<file>\n````languageId\n// filepath: /path/to/file\n// ...existing code...\n{ changed code }\n// ...existing code...\n{ changed code }\n// ...existing code...\n````\n</file>\n8. If you generate edits for a Markdown file, use four backticks for the outer code block.\n\nHere is an example of how you should format a code block belonging to the file example.ts in your response:\n<example>\n### /Users/someone/proj01/example.ts\n\nAdd a new property 'age' and a new method 'getAge' to the class Person.\n\n<file>\n```typescript\n// filepath: /Users/someone/proj01/example.ts\nclass Person {\n\t// ...existing code...\n\tage: number;\n\t// ...existing code...\n\tgetAge() {\n\t\treturn this.age;\n\t}\n}\n```\n</file>\n</example>\nAside from <file> tags, you should not structure your response using XML."},{"role":"user","content":"<file>\n```typescript\n// filepath: /home/rainer/live/2025-02-04-copilot/src/calculate_tree.ts\nimport { degreeToRadian } from \"./math_helpers\";\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport interface Branch {\n  start: Point;\n  end: Point;\n}\n\nexport interface TreeParams {\n  x1: number;\n  y1: number;\n  angle: number;\n  length: number;\n  level: number;\n  maxLevel?: number;\n}\n\nfunction calculateBranchEndpoint(start: Point, angle: number, length: number): Point {\n  const rad = degreeToRadian(angle);\n  return {\n    x: start.x + length * Math.cos(rad),\n    y: start.y + length * Math.sin(rad)\n  };\n}\n\nexport function calculateTree(params: TreeParams): Branch[] {\n  const { x1, y1, angle, length, level, maxLevel = 11 } = params;\n  if (level >= maxLevel) { return []; }\n\n  const start: Point = { x: x1, y: y1 };\n  const end = calculateBranchEndpoint(start, angle, length);\n  const currentBranch: Branch = { start, end };\n\n  return [\n    currentBranch,\n    ...calculateTree({\n      x1: end.x,\n      y1: end.y,\n      angle: angle - 20,\n      length: length * 0.8,\n      level: level + 1,\n      maxLevel\n    }),\n    ...calculateTree({\n      x1: end.x,\n      y1: end.y,\n      angle: angle + 20,\n      length: length * 0.8,\n      level: level + 1,\n      maxLevel\n    })\n  ];\n}\n```\n</file>\n<file-selection>\n```typescript\n// filepath: /home/rainer/live/2025-02-04-copilot/src/calculate_tree.ts\nexport function calculateTree(params: TreeParams): Branch[] {\n  const { x1, y1, angle, length, level, maxLevel = 11 } = params;\n  if (level >= maxLevel) { return []; }\n\n  const start: Point = { x: x1, y: y1 };\n  const end = calculateBranchEndpoint(start, angle, length);\n  const currentBranch: Branch = { start, end };\n\n  return [\n    currentBranch,\n    ...calculateTree({\n      x1: end.x,\n      y1: end.y,\n      angle: angle - 20,\n      length: length * 0.8,\n      level: level + 1,\n      maxLevel\n    }),\n    ...calculateTree({\n      x1: end.x,\n      y1: end.y,\n      angle: angle + 20,\n      length: length * 0.8,\n      level: level + 1,\n      maxLevel\n    })\n  ];\n}\n```\n</file-selection>\n<reminder>\nAvoid repeating existing code, instead use `// ...existing code...` comments to represent regions of unchanged code.\nEach file's code block must start with a comment containing the filepath. This includes Markdown files.\n</reminder>\n<prompt>\nConvert calculateTree from recursive to loop\n</prompt>"}],"model":"claude-3.5-sonnet","temperature":0.1,"top_p":1,"max_tokens":4096,"n":1,"stream":true}