{
    "messages": [
        {
            "role": "system",
            "content": "You are an AI programming assistant.
When asked for your name, you must respond with \"GitHub Copilot\".
Follow the user's requirements carefully & to the letter.
Follow Microsoft content policies.
Avoid content that violates copyrights.
If you are asked to generate content that is harmful, hateful, racist, sexist, lewd, violent, or completely irrelevant to software engineering, only respond with \"Sorry, I can't assist with that.\"
Keep your answers short and impersonal."
        },
        {
            "role": "user",
            "content": "The user has a request for modifying one or more files.
1. Please come up with a solution that you first describe step-by-step.
2. Group your changes by file. Use the file path as the header.
3. For each file, give a short summary of what needs to be changed followed by a code block that contains the code changes.
4. Each file's code block must start with a comment containing the filepath.
5. Use a single code block per file that needs to be modified, even if there are multiple changes for a file.
6. The user is very smart and can understand how to merge your code blocks into their files, you just need to provide minimal hints.
7. Avoid repeating existing code, instead use comments to represent regions of unchanged code. The user prefers that you are as concise as possible. For example: 
<file>
````languageId
// filepath: /path/to/file
// ...existing code...
{ changed code }
// ...existing code...
{ changed code }
// ...existing code...
````
</file>
8. If you generate edits for a Markdown file, use four backticks for the outer code block.

Here is an example of how you should format a code block belonging to the file example.ts in your response:
<example>
### /Users/someone/proj01/example.ts

Add a new property 'age' and a new method 'getAge' to the class Person.

<file>
```typescript
// filepath: /Users/someone/proj01/example.ts
class Person {
\t// ...existing code...
\tage: number;
\t// ...existing code...
\tgetAge() {
\t\treturn this.age;
\t}
}
```
</file>
</example>
Aside from <file> tags, you should not structure your response using XML."
        },
        {
            "role": "user",
            "content": "<file>
```typescript
// filepath: /home/rainer/live/2025-02-04-copilot/src/calculate_tree.ts
import { degreeToRadian } from \"./math_helpers\";

export interface Point {
  x: number;
  y: number;
}

export interface Branch {
  start: Point;
  end: Point;
}

export interface TreeParams {
  x1: number;
  y1: number;
  angle: number;
  length: number;
  level: number;
  maxLevel?: number;
}

function calculateBranchEndpoint(start: Point, angle: number, length: number): Point {
  const rad = degreeToRadian(angle);
  return {
    x: start.x + length * Math.cos(rad),
    y: start.y + length * Math.sin(rad)
  };
}

export function calculateTree(params: TreeParams): Branch[] {
  const { x1, y1, angle, length, level, maxLevel = 11 } = params;
  if (level >= maxLevel) { return []; }

  const start: Point = { x: x1, y: y1 };
  const end = calculateBranchEndpoint(start, angle, length);
  const currentBranch: Branch = { start, end };

  return [
    currentBranch,
    ...calculateTree({
      x1: end.x,
      y1: end.y,
      angle: angle - 20,
      length: length * 0.8,
      level: level + 1,
      maxLevel
    }),
    ...calculateTree({
      x1: end.x,
      y1: end.y,
      angle: angle + 20,
      length: length * 0.8,
      level: level + 1,
      maxLevel
    })
  ];
}
```
</file>
<file-selection>
```typescript
// filepath: /home/rainer/live/2025-02-04-copilot/src/calculate_tree.ts
export function calculateTree(params: TreeParams): Branch[] {
  const { x1, y1, angle, length, level, maxLevel = 11 } = params;
  if (level >= maxLevel) { return []; }

  const start: Point = { x: x1, y: y1 };
  const end = calculateBranchEndpoint(start, angle, length);
  const currentBranch: Branch = { start, end };

  return [
    currentBranch,
    ...calculateTree({
      x1: end.x,
      y1: end.y,
      angle: angle - 20,
      length: length * 0.8,
      level: level + 1,
      maxLevel
    }),
    ...calculateTree({
      x1: end.x,
      y1: end.y,
      angle: angle + 20,
      length: length * 0.8,
      level: level + 1,
      maxLevel
    })
  ];
}
```
</file-selection>
<reminder>
Avoid repeating existing code, instead use `// ...existing code...` comments to represent regions of unchanged code.
Each file's code block must start with a comment containing the filepath. This includes Markdown files.
</reminder>
<prompt>
Convert calculateTree from recursive to loop
</prompt>"
        }
    ],
    "model": "claude-3.5-sonnet",
    "temperature": 0.1,
    "top_p": 1,
    "max_tokens": 4096,
    "n": 1,
    "stream": true
}